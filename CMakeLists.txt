CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)
PROJECT(OSQUERY)

if(APPLE)
  set(OS_COMPILE_FLAGS "-std=c++11 -stdlib=libc++")
  set(OS_WHOLELINK_PRE "-Wl,-all_load")
  set(OS_WHOLELINK_POST "")
else()
  set(OS_COMPILE_FLAGS "-std=c++11")
  set(OS_WHOLELINK_PRE "-Wl,-whole-archive")
  set(OS_WHOLELINK_POST "-Wl,-no-whole-archive")
endif()

if(BUILD_SHARED_LIBS)
  set(USER_COMPILE_FLAGS "-fPIC")
else()
  # Building/linking statically (no libosquery)
  set(USER_COMPILE_FLAGS "-static")
endif()

set(OS_COMPILE_FLAGS "${OS_COMPILE_FLAGS} ${USER_COMPILE_FLAGS}")

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake" ${CMAKE_MODULE_PATH})
FIND_PACKAGE(Gtest REQUIRED)
FIND_PACKAGE(Sqlite3 REQUIRED)
FIND_PACKAGE(BZip2 REQUIRED)
FIND_PACKAGE(Boost 1.55.0 REQUIRED)
FIND_PACKAGE(Glog REQUIRED)
FIND_PACKAGE(Gflags REQUIRED)
FIND_PACKAGE(Thrift 0.9.1 REQUIRED)
FIND_PACKAGE(Readline REQUIRED)
FIND_PACKAGE(OpenSSL REQUIRED)
FIND_PACKAGE(Threads REQUIRED)
FIND_PACKAGE(Snappy REQUIRED)
FIND_PACKAGE(RocksDB REQUIRED)
FIND_PACKAGE(Crypto REQUIRED)
FIND_PACKAGE(Dl REQUIRED)
if(NOT APPLE)
  FIND_PACKAGE(Unwind REQUIRED)
  FIND_PACKAGE(LZMA REQUIRED)
endif()

INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}")
INCLUDE_DIRECTORIES("/usr/local/include")
LINK_DIRECTORIES("/usr/local/lib")

ENABLE_TESTING()

ADD_SUBDIRECTORY(osquery)
ADD_SUBDIRECTORY(tools)
